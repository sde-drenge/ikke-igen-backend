"""
Django settings for settings project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
import sys
from pathlib import Path

from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes, serialization
from dotenv import load_dotenv

# TODO Remove in production/live tests when we buy new servers
CELERY_TASK_ALWAYS_EAGER = True

load_dotenv()
DEBUG = os.getenv("DEBUG", "False") == "True"

REQUIRED_ENV_PROPETIES = [
    {
        "name": "DOMAIN",
        "requiredIf": None,
    },
    {
        "name": "FROM_EMAIL",
        "requiredIf": None,
    },
    {
        "name": "DISCORD_WEBHOOK_URL",
        "requiredIf": None,
    },
    {
        "name": "EMAIL_VERIFICATION_NEEDED",
        "requiredIf": "True",
        "followedRequirements": ["APP_NAME"],
    },
    {"name": "PATH_TO_PRIVATE_KEY", "requiredIf": None},
    {"name": "PATH_TO_PUBLIC_KEY", "requiredIf": None},
]

DEFAULTSETTINGS = {}

for prop in REQUIRED_ENV_PROPETIES:
    if prop["name"] not in os.environ:
        raise Exception(f"Missing required environment variable: {prop['name']}")
    DEFAULTSETTINGS[prop["name"]] = os.getenv(prop["name"])

    if prop["requiredIf"] is not None:
        if os.getenv(prop["requiredIf"]) == prop["requiredIf"]:
            for req in prop["followedRequirements"]:
                if req not in os.environ:
                    raise Exception(f"Missing required environment variable: {req}")
                DEFAULTSETTINGS[req] = os.getenv(req)


files = [
    {
        "path": DEFAULTSETTINGS.get("PATH_TO_PUBLIC_KEY"),
        "name": "PUBLIC_KEY",
        "type": "public_key",
    },
    {
        "path": DEFAULTSETTINGS.get("PATH_TO_PRIVATE_KEY"),
        "name": "PRIVATE_KEY",
        "type": "private_key",
    },
]
try:
    for file in files:
        with open(file.get("path"), "rb") as key_file:
            fileType = file.get("type")
            if not fileType:
                DEFAULTSETTINGS[file.get("name").replace("PATH_TO_", "")] = (
                    key_file.read()
                )
                continue

            if fileType == "public_key":
                DEFAULTSETTINGS[file.get("name").replace("PATH_TO_", "")] = (
                    serialization.load_pem_public_key(
                        key_file.read(),
                        backend=default_backend(),
                    )
                )

            if fileType == "private_key":
                DEFAULTSETTINGS[file.get("name").replace("PATH_TO_", "")] = (
                    serialization.load_pem_private_key(
                        key_file.read(),
                        password=None,  # Use a password here if your private key is encrypted
                        backend=default_backend(),
                    )
                )
except Exception as e:
    for file in files:
        DEFAULTSETTINGS[file.get("name").replace("PATH_TO_", "")] = None

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

APPS_DIR = BASE_DIR / "apps"
sys.path.insert(0, str(APPS_DIR))
IKKEIGEN_STATIC_DIR = BASE_DIR / "static"
IKKEIGEN_STATIC_URL = "/resources/"
STATIC_URL = "/admin-resources/"
STATIC_ROOT = BASE_DIR / "static_root"

PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), "../"))
LOCALE_PATHS = (os.path.join(PROJECT_ROOT, "locale"),)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "nh7b0ld-1b88qr5m6o_wjkqfn^ij$=7=+a_8^s*n^%65=ggjy)"

CSRF_TRUSTED_ORIGINS = []
SHELL_PLUS = "ipython"

AUTH_USER_MODEL = "users.User"
REST_FRAMEWORK = {
    "UNICODE_JSON": True,
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "users.auth.CustomTokenAuthentication",
        # "rest_framework.authentication.SessionAuthentication",
        # "oauth2_provider.contrib.rest_framework.OAuth2Authentication",
    ),
    "DEFAULT_RENDERER_CLASSES": (
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ),
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
    "DATETIME_INPUT_FORMATS": (
        "%d/%m/%Y %H:%M",  # '10/25/06 14:30'
        "%Y-%m-%dT%H:%M:%S%z",  # 2018-04-30T15:24:00+02:00
        "iso-8601",
    ),
    "DATE_INPUT_FORMATS": (
        "%d/%m/%Y",
        "%d-%m-%Y",
    ),
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

# Application definition
CUSTOM_APPS = [
    "users",
    "workplaces",
    "schools",
]


INSTALLED_APPS = [
    "admin_shortcuts",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "djangoql",
    "django_extensions",
    "rest_framework",
    "rest_framework.authtoken",
    "drf_spectacular",
] + CUSTOM_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "settings.middleware.error_handling.GlobalExceptionMiddleware",
]

ROOT_URLCONF = "settings.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


WSGI_APPLICATION = "settings.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("DB_NAME", "ikkeigen"),
        "USER": os.environ.get("DB_USER", "ikkeigen"),
        "PASSWORD": os.environ.get("DB_PASS", "ikkeigen"),
        "HOST": os.environ.get("DB_SERVICE", "localhost"),
        "PORT": os.environ.get("DB_PORT", "5432"),
    },
}


ADMIN_SHORTCUTS = [
    {
        "shortcuts": [
            {
                "title": "Documentation",
                "url": "https://backend.ikkeigen.dk/documentation/",
            },
            {
                "title": "Users",
                "url_name": "admin:users_user_changelist",
            },
        ]
    }
]

ADMIN_SHORTCUTS_SETTINGS = {
    "show_on_all_pages": True,
    "hide_app_list": False,
    "open_new_window": False,
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "da"
LANGUAGES = (("da", "Dansk"),)
ACCEPTED_LANGUAGES = ["da", "en"]
LANGUAGE_DEFAULT = "en"


TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

SPECTACULAR_SETTINGS = {
    "Title": "Ikkeigen API",
}

SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "apiKey": {"type": "apiKey", "name": "Authorization: Token", "in": "header"}
    },
}


EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = os.environ.get("EMAIL_HOST", "")  # e.g. docker service name
EMAIL_PORT = int(
    os.environ.get("EMAIL_PORT", 587)
)  # 587 for STARTTLS, 465 for SSL, 25 for plain
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER", "")  # username or blank for unauth
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD", "")
EMAIL_USE_TLS = (
    os.environ.get("EMAIL_USE_TLS", "True") == "True"
)  # STARTTLS (common on 587)
EMAIL_USE_SSL = os.environ.get("EMAIL_USE_SSL", "False") == "True"  # only if using 465
EMAIL_TIMEOUT = int(os.environ.get("EMAIL_TIMEOUT", 10))


DEFAULT_FROM_EMAIL = "no-reply@ikkeigen.dk"
SERVER_EMAIL = "no-reply@ikkeigen.dk"


ALLOWED_HOSTS = [
    "localhost",
    "backend.ikkeigen.dk",
    "10.130.67.42",
]

CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "https://ikkeigen.dk",
    "https://backend.ikkeigen.dk",
    "http://10.130.67.42:8000",
]
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "https://backend.ikkeigen.dk",
    "http://10.130.67.42:8000",
]
